openapi: 3.1.0
info:
  title: WebService API Reference
  description: BMO is Mozilla's highly customized version of Bugzilla.
  license:
    name: MPL-2.0
    url: https://github.com/mozilla-bteam/bmo/blob/master/LICENSE
  version: 1.0.0

servers:
  - url: https://bugzilla.mozilla.org/rest
    description: Production issue tracker for Firefox and other Mozilla products.
  - url: https://bugzilla-dev.allizom.org/rest
    description: Test instance for Bugzilla.

paths:
  # Bugs
  /bug/{id_or_alias}:
    get:
      tags: [Bugs]
      summary: Get information about a bug
      description: Gets information about a particular bug using its ID or alias.
      parameters:
        - name: id_or_alias
          in: path
          description: An integer bug ID or a bug alias string.
          required: true
          schema:
            type:
              - string
              - integer
      responses:
        200:
          description: A list of Bugs
          content:
            application/json:
              schema:
                type: object
                properties:
                  faults:
                    type: array
                  bugs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Bug"
              example:
                faults: []
                bugs:
                  - assigned_to_detail:
                      id: 2
                      real_name: "Test User"
                      nick: "user"
                      name: "user@bugzilla.org"
                      email: "user@bugzilla.org"
                    flags:
                      - type_id: 11
                        modification_date: "2014-09-28T21:03:47Z"
                        name: "blocker"
                        status: "?"
                        id: 2906
                        setter: "user@bugzilla.org"
                        creation_date: "2014-09-28T21:03:47Z"
                    resolution: "INVALID"
                    id: 35
                    type: "defect"
                    qa_contact: ""
                    triage_owner: ""
                    version: "1.0"
                    status: "RESOLVED"
                    creator: "user@bugzilla.org"
                    cf_drop_down: "---"
                    summary: "test bug"
                    last_change_time: "2014-09-23T19:12:17Z"
                    platform: "All"
                    url: ""
                    classification: "Unclassified"
                    cc_detail:
                      - id: 786
                        real_name: "Foo Bar"
                        nick: "foo"
                        name: "foo@bar.com"
                        email: "foo@bar.com"
                    priority: "P1"
                    is_confirmed: true
                    creation_time: "2000-07-25T13:50:04Z"
                    assigned_to: "user@bugzilla.org"
                    alias: null
                    cf_large_text: ""
                    groups: []
                    op_sys: "All"
                    cf_bug_id: null
                    depends_on: []
                    is_cc_accessible: true
                    is_open: false
                    cf_qa_list_4: "---"
                    keywords: []
                    cc:
                      - "foo@bar.com"
                    see_also: []
                    deadline: null
                    is_creator_accessible: true
                    whiteboard: ""
                    dupe_of: null
                    duplicates: []
                    target_milestone: "---"
                    cf_mulitple_select: []
                    component: "SaltSprinkler"
                    severity: "critical"
                    cf_date: null
                    product: "FoodReplicator"
                    creator_detail:
                      id: 28
                      real_name: "hello"
                      nick: "namachi"
                      name: "user@bugzilla.org"
                      email: "namachi@netscape.com"
                    cf_free_text: ""
                    blocks: []
                    regressed_by: []
                    regressions: []
                    comment_count: 12

        default:
          description: |
            Various error responses, including:

            * 100 (Invalid Bug Alias)
              If you specified an alias and there is no bug with that alias.
            * 101 (Invalid Bug ID)
              The bug_id you specified doesn't exist in the database.
            * 102 (Access Denied)
              You do not have access to the bug_id you specified.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/{id}/history:
    get:
      tags: [Bugs]
      summary: Get the history of changes for a specific bug
      description: |
        Gets the history of changes for a particular bug in the database. You can specify a bug ID or alias and, optionally, a datetime timestamp to only show history since that date.
      parameters:
        - name: id
          in: path
          description: An integer bug ID or alias.
          required: true
          schema:
            type:
              - string
              - integer
        - name: new_since
          in: query
          description: A datetime timestamp to only show history since.
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: A list of bugs with their history
          content:
            application/json:
              schema:
                type: object
                properties:
                  bugs:
                    type: array
                    items:
                      $ref: "#/components/schemas/BugWithHistory"
              example:
                bugs:
                  - id: 35
                    alias: null
                    history:
                      - when: "2014-09-23T19:12:17Z"
                        who: "user@bugzilla.org"
                        changes:
                          - field_name: "priority"
                            added: "P1"
                            removed: "P2"
                          - field_name: "severity"
                            added: "critical"
                            removed: "blocker"
                      - when: "2014-09-28T21:03:47Z"
                        who: "user@bugzilla.org"
                        changes:
                          - field_name: "flagtypes.name"
                            added: "blocker?"
                            removed: ""
        default:
          description: |
            Same as Get Bug.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug:
    get:
      tags: [Bugs]
      summary: Search for bugs based on particular criteria
      description: |
        Allows you to search for bugs based on specific criteria. Bugs are returned if they match the criteria specified. Criteria are joined in a logical AND, meaning bugs returned must match all of the specified criteria.
      parameters:
        - name: alias
          in: query
          description: The unique alias of this bug. A null value will be returned if this bug has no alias.
          schema:
            type: string
        - name: assigned_to
          in: query
          description: The login name of a user that a bug is assigned to.
          schema:
            type: string
        - name: component
          in: query
          description: The name of the Component that the bug is in.
          schema:
            type: string
        - name: count_only
          in: query
          description: If set to true, an object with a single key called "bug_count" will be returned, which is the number of bugs that matched the search.
          schema:
            type: boolean
        - name: creation_time
          in: query
          description: Searches for bugs that were created at this time or later. May not be an array.
          schema:
            type: string
            format: date-time
        - name: creator
          in: query
          description: The login name of the user who created the bug.
          schema:
            type: string
        - name: description
          in: query
          description: The description (initial comment) of the bug.
          schema:
            type: string
        - name: filed_via
          in: query
          description: Searches for bugs that were created with this method.
          schema:
            type: string
        - name: id
          in: query
          description: The numeric ID of the bug.
          schema:
            type: integer
        - name: last_change_time
          in: query
          description: Searches for bugs that were modified at this time or later. May not be an array.
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Limit the number of results returned.
          schema:
            type: integer
        - name: longdescs.count
          in: query
          description: The number of comments a bug has.
          schema:
            type: integer
        - name: offset
          in: query
          description: Used in conjunction with the limit argument, offset defines the starting position for the search.
          schema:
            type: integer
        - name: op_sys
          in: query
          description: The "Operating System" field of a bug.
          schema:
            type: string
        - name: platform
          in: query
          description: The Platform (sometimes called "Hardware") field of a bug.
          schema:
            type: string
        - name: priority
          in: query
          description: The Priority field on a bug.
          schema:
            type: string
        - name: product
          in: query
          description: The name of the Product that the bug is in.
          schema:
            type: string
        - name: quicksearch
          in: query
          description: Search for bugs using quicksearch syntax.
          schema:
            type: string
        - name: resolution
          in: query
          description: The current resolution--only set if a bug is closed.
          schema:
            type: string
        - name: severity
          in: query
          description: The Severity field on a bug.
          schema:
            type: string
        - name: status
          in: query
          description: The current status of a bug (not including its resolution, if it has one, which is a separate field above).
          schema:
            type: string
        - name: summary
          in: query
          description: Searches for substrings in the single-line Summary field on bugs.
          schema:
            type: string
        - name: tags
          in: query
          description: Searches for a bug with the specified tag.
          schema:
            type: string
        - name: target_milestone
          in: query
          description: The Target Milestone field of a bug.
          schema:
            type: string
        - name: qa_contact
          in: query
          description: The login name of the bug's QA Contact.
          schema:
            type: string
        - name: triage_owner
          in: query
          description: The login name of the Triage Owner of a bug's component.
          schema:
            type: string
        - name: type
          in: query
          description: The Type field on a bug.
          schema:
            type: string
        - name: url
          in: query
          description: The "URL" field of a bug.
          schema:
            type: string
        - name: version
          in: query
          description: The Version field of a bug.
          schema:
            type: string
        - name: whiteboard
          in: query
          description: Search the "Status Whiteboard" field on bugs for a substring.
          schema:
            type: string
      responses:
        200:
          description: A list of bugs matching the search criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  bugs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Bug"
              example:
                bugs:
                  - id: 35
                    alias: null
                    assigned_to: "user@bugzilla.org"
                    component: "Widgets"
                    creation_time: "2014-09-23T19:12:17Z"
                    creator: "user@bugzilla.org"
                    description: "Bug description goes here."
                    filed_via: "REST API"
                    last_change_time: "2014-09-28T21:03:47Z"
                    op_sys: "All"
                    platform: "All"
                    priority: "P1"
                    product: "MyProduct"
                    resolution: null
                    severity: "critical"
                    status: "NEW"
                    summary: "Bug summary goes here."
                    tags: null
                    target_milestone: "---"
                    qa_contact: null
                    triage_owner: null
                    type: "defect"
                    url: null
                    version: null
                    whiteboard: null
                    longdescs_count: 2
        default:
          description: |
            If you specify an invalid value for a particular field, you just won’t get any results for that value.

            * 1000 (Parameters Required) You may not search without any search terms.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Comments
  /bug/{id_or_alias}/comment:
    get:
      tags: [Comments]
      summary: Get all comments for a bug
      description: This allows you to get all comments for a particular bug using the bug ID or alias.
      parameters:
        - name: id_or_alias
          in: path
          description: A single integer bug ID or alias.
          required: true
          schema:
            type:
              - string
              - integer
        - name: new_since
          in: query
          description: If specified, the method will only return comments newer than this time.
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: A list of Comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  bugs:
                    description: |
                      This is an object, where the keys are the numeric IDs of the bugs, and the value is a object with a single key, comments, which is an array of comments.
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        comments:
                          type: array
                          items:
                            $ref: "#/components/schemas/Comment"
                  comments:
                    type: object
              example:
                bugs:
                  35:
                    comments:
                      - time: "2000-07-25T13:50:04Z"
                        text: "test bug to fix problem in removing from cc list."
                        bug_id: 35
                        count: 0
                        attachment_id: null
                        is_private: false
                        tags: []
                        creator: user@bugzilla.org
                        creation_time: "2000-07-25T13:50:04Z"
                        id: 75

                comments: {}
        default:
          description: |
            Various error responses, including:

            * 100 (Invalid Bug Alias)
              If you specified an alias and there is no bug with that alias.
            * 101 (Invalid Bug ID)
              The bug_id you specified doesn't exist in the database.
            * 102 (Access Denied)
              You do not have access to the bug_id you specified.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/comment/{comment_id}:
    get:
      tags: [Comments]
      summary: Get a specific comment
      description: This allows you to get a specific comment based on the comment ID
      parameters:
        - name: comment_id
          in: path
          description: A single integer comment ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A single Comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    description: This is an object, where the keys are the numeric IDs of the bugs, and the value is a object with a single key, comments, which is an array of comments.
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/Comment"
                  bugs:
                    type: object
              example:
                comments:
                  75:
                    time: "2000-07-25T13:50:04Z"
                    text: "test bug to fix problem in removing from cc list."
                    bug_id: 35
                    count: 0
                    attachment_id: null
                    is_private: false
                    tags: []
                    creator: user@bugzilla.org
                    creation_time: "2000-07-25T13:50:04Z"
                    id: 75
                bugs: {}
        default:
          description: |
            Various error responses, including:

            * 110 (Comment Is Private) 
              You specified the id of a private comment in the “comment_ids” argument, and you are not in the “insider group” that can see private comments.
            * 111 (Invalid Comment ID)
              You specified an id in the “comment_ids” argument that is invalid–either you specified something that wasn’t a number, or there is no comment with that id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/{id}/comment:
    post:
      tags: [Comments]
      summary: Create a comment on a bug
      description: This allows you to add a comment to a bug in Bugzilla. All comments created via the API will be considered Markdown (specifically GitHub Flavored Markdown).
      parameters:
        - name: id
          in: path
          description: The ID or alias of the bug to append a comment to.
          required: true
          schema:
            type:
              - string
              - integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  description: List of integer bug IDs to add the comment to.
                  type: array
                  items:
                    type: integer
                comment:
                  description: The comment to append to the bug. If this is empty or all whitespace, an error will be thrown.
                  type: string
                is_private:
                  description: If set to true, the comment is private, otherwise it is assumed to be public.
                  type: boolean
                is_markdown:
                  description: "If true, the comment will be rendered as markdown. (default: ``false``)"
                  type: boolean
                work_time:
                  description: Adds this many hours to the "Hours Worked" on the bug. If you are not in the time tracking group, this value will be ignored.
                  type: number
              required:
                - comment
              additionalProperties: false
            example:
              ids:
                - 123
                - 456
              comment: "This is an additional comment"
              is_private: false
              is_markdown: true
              work_time: 2.5

      responses:
        200:
          description: ID of the newly-created comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              example:
                id: 789
        default:
          description: |
            Various error responses, including:

            * 54 (Hours Worked Too Large)
            * 100 (Invalid Bug Alias)
            * 101 (Invalid Bug ID)
            * 109 (Bug Edit Denied)
            * 113 (Can't Make Private Comments)
            * 114 (Comment Too Long)
            * 140 (Markdown Disabled)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/comment/tags/{query}:
    get:
      tags: [Comments]
      summary: Search for comment tags
      description: Searches for tags which contain the provided substring.
      parameters:
        - name: query
          in: path
          description: Only tags containing this substring will be returned.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: If provided, will return no more than "limit" tags. Defaults to "10".
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: An array of matching tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - "spam"
        default:
          description: |
            Various error responses, including:

            * 125 (Comment Tagging Disabled)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/comment/{comment_id}/tags:
    put:
      tags: [Comments]
      summary: Update tags for a comment
      description: Adds or removes tags from a comment.
      parameters:
        - name: comment_id
          in: path
          description: The ID of the comment to update.
          required: true
          schema:
            type: integer
          example: 75
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                add:
                  description: The tags to attach to the comment.
                  type: array
                  items:
                    type: string
                remove:
                  description: The tags to detach from the comment.
                  type: array
                  items:
                    type: string
              # QUESTION: should the parameter be in the body?
              # https://bmo.readthedocs.io/en/latest/api/core/v1/comment.html#update-comment-tags
              required:
                - comment_id
              additionalProperties: false
            example:
              # comment_id: 75
              add:
                - "spam"
                - "bad"

      responses:
        200:
          description: An array of strings containing the comment's updated tags.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - "bad"
                - "spam"
        default:
          description: |
            Various error responses, including:

            * 125 (Comment Tagging Disabled)
            * 126 (Invalid Comment Tag)
            * 127 (Comment Tag Too Short)
            * 128 (Comment Tag Too Long)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/comment/render:
    post:
      tags: [Comments]
      summary: Render comment as HTML
      description: Returns the HTML rendering of the provided comment text.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  description: Comment text to render.
                  type: string
                id:
                  description: The ID of the bug to render the comment against.
                  type: integer
              required:
                - text
              additionalProperties: false
            example:
              text: "This issue has been fixed in bug 1234."
              id: 2345
      responses:
        200:
          description: Text containing the HTML rendering
          content:
            application/json:
              schema:
                type: object
                properties:
                  html:
                    type: string
              example:
                html: 'This issue has been fixed in <a class="bz_bug_link bz_status_RESOLVED bz_closed" title="RESOLVED FIXED - some issue that was fixed" href="show_bug.cgi?id=1234">bug 1234</a>.'
        default:
          description: |
            Various error responses, including those thrown by :ref:`rest_single_bug`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Bug:
      type: object
      properties:
        actual_time:
          description: The total number of hours that this bug has taken so far.
          type: number
        alias:
          description: The unique alias of this bug. A null value will be returned if this bug has no alias.
          type: string
        assigned_to:
          description: The login name of the user to whom the bug is assigned.
          type: string
        assigned_to_detail:
          $ref: "#/components/schemas/User"
        blocks:
          description: The IDs of bugs that are "blocked" by this bug.
          type: array
          items:
            type: integer
        cc:
          description: The login names of users on the CC list of this bug.
          type: array
          items:
            type: string
        cc_detail:
          description: Array of objects containing detailed user information for each of the cc list members.
          type: array
          items:
            $ref: "#/components/schemas/User"
        classification:
          description: The name of the current classification the bug is in.
          type: string
        component:
          description: The name of the current component of this bug.
          type: string
        creation_time:
          description: When the bug was created.
          type: string
          format: date-time
        creator:
          description: The login name of the person who filed this bug (the reporter).
          type: string
        creator_detail:
          $ref: "#/components/schemas/User"
        deadline:
          description: The day that this bug is due to be completed, in the format YYYY-MM-DD.
          type: string
        depends_on:
          description: The IDs of bugs that this bug "depends on".
          type: array
          items:
            type: integer
        dupe_of:
          description: The bug ID of the bug that this bug is a duplicate of. If this bug isn't a duplicate of any bug, this will be null.
          type: integer
        duplicates:
          description: The ids of bugs that are marked as duplicate of this bug.
          type: array
          items:
            type: integer
        estimated_time:
          description: The number of hours that it was estimated that this bug would take.
          type: number
        flags:
          description: An array of objects containing the information about flags currently set for the bug.
          type: array
          items:
            $ref: "#/components/schemas/Flag"
        groups:
          description: The names of all the groups that this bug is in.
          type: array
          items:
            type: string
        id:
          description: The unique numeric ID of this bug.
          type: integer
        is_cc_accessible:
          description: If true, this bug can be accessed by members of the CC list, even if they are not in the groups the bug is restricted to.
          type: boolean
        is_confirmed:
          description: true if the bug has been confirmed. Usually this means that the bug has at some point been moved out of the UNCONFIRMED status and into another open status.
          type: boolean
        is_creator_accessible:
          description: If true, this bug can be accessed by the creator of the bug, even if they are not a member of the groups the bug is restricted to.
          type: boolean
        keywords:
          description: Each keyword that is on this bug.
          type: array
          items:
            type: string
        last_change_time:
          description: When the bug was last changed.
          type: string
          format: date-time
        op_sys:
          description: The name of the operating system that the bug was filed against.
          type: string
        platform:
          description: The name of the platform (hardware) that the bug was filed against.
          type: string
        priority:
          description: The priority of the bug.
          type: string
        product:
          description: The name of the product this bug is in.
          type: string
        qa_contact:
          description: The login name of the current QA Contact on the bug.
          type: string
        qa_contact_detail:
          $ref: "#/components/schemas/User"
        regressed_by:
          description: The IDs of bugs that introduced this bug.
          type: array
          items:
            type: integer
        regressions:
          description: The IDs of bugs that are introduced by this bug.
          type: array
          items:
            type: integer
        remaining_time:
          description: The number of hours of work remaining until work on this bug is complete.
          type: number
        resolution:
          description: The current resolution of the bug, or an empty string if the bug is open.
          type: string
        see_also:
          description: The URLs in the See Also field on the bug.
          type: array
          items:
            type: string
        severity:
          description: The current severity of the bug.
          type: string
        status:
          description: The current status of the bug.
          type: string
        summary:
          description: The summary of this bug.
          type: string
        target_milestone:
          description: The milestone that this bug is supposed to be fixed by, or for closed bugs, the milestone that it was fixed for.
          type: string
        type:
          description: The type of the bug.
          type: string
        update_token:
          description: The token that you would have to pass to the process_bug.cgi page in order to update this bug. This changes every time the bug is updated. This field is not returned to logged-out users.
          type: string
        url:
          description: A URL that demonstrates the problem described in the bug, or is somehow related to the bug report.
          type: string
        version:
          description: The version the bug was reported against.
          type: string
        whiteboard:
          description: The value of the "status whiteboard" field on the bug.
          type: string
        # Custom fields?
        # Extra fields?

    Flag:
      type: object
      properties:
        id:
          description: The ID of the flag.
          type: integer
        name:
          description: The name of the flag.
          type: string
        type_id:
          description: The type ID of the flag.
          type: integer
        creation_date:
          description: The timestamp when this flag was originally created.
          type: string
          format: date-time
        modification_date:
          description: The timestamp when the flag was last modified.
          type: string
          format: date-time
        status:
          description: The current status of the flag.
          type: string
        setter:
          description: The login name of the user who created or last modified the flag.
          type: string
        requestee:
          description: The login name of the user this flag has been requested to be granted or denied. Note, this field is only returned if a requestee is set.
          type: string

    User:
      type: object
      properties:
        id:
          description: The user ID for this user.
          type: integer
        real_name:
          description: The 'real' name for this user, if any.
          type: string
        nick:
          description: The user's nickname. Currently, this is extracted from the real_name, name, or email field.
          type: string
        name:
          description: The user's Bugzilla login.
          type: string
        email:
          description: The user's email address. Currently, this is the same value as the name.
          type: string

    BugWithHistory:
      type: object
      properties:
        id:
          description: The numeric ID of the bug.
          type: integer
        alias:
          description: The unique alias of this bug. A null value will be returned if this bug has no alias.
          type: string
        history:
          description: An array of History objects.
          type: array
          items:
            $ref: "#/components/schemas/History"

    History:
      type: object
      properties:
        when:
          description: The date the bug activity/change happened.
          type: string
          format: date-time
        who:
          description: The login name of the user who performed the bug change.
          type: string
        changes:
          description: An array of Change objects.
          type: array
          items:
            $ref: "#/components/schemas/Change"

    Change:
      type: object
      properties:
        field_name:
          description: The name of the bug field that has changed.
          type: string
        removed:
          description: The previous value of the bug field which has been deleted by the change.
          type: string
        added:
          description: The new value of the bug field which has been added by the change.
          type: string
        attachment_id:
          description: The ID of the attachment that was changed. This only appears if the change was to an attachment, otherwise `attachment_id` will not be present in this object.
          type: integer
          nullable: true

    Comment:
      type: object
      properties:
        id:
          description: The globally unique ID for the comment.
          type: integer
        bug_id:
          description: The ID of the bug that this comment is on.
          type: integer
        attachment_id:
          description: If the comment was made on an attachment, this will be the ID of that attachment. Otherwise it will be null.
          type:
            - integer
            - null
        count:
          description: The number of the comment local to the bug. The Description is 0, comments start with 1.
          type: integer
        text:
          description: The body of the comment, including any special text (such as “this bug was marked as a duplicate of…”).
          type: string
        raw_text:
          description: The body of the comment without any special additional text.
          type: string
        creator:
          description: The login name of the comment’s author.
          type: string
        time:
          description: The time (in Bugzilla’s timezone) that the comment was added.
          type: string
          format: date-time
        creation_time:
          description: |
            This is exactly same as the ``time`` key. Use this
            field instead of ``time`` for consistency with other
            methods including :ref:`rest_single_bug` and
            :ref:`rest_attachments`.

            For compatibility, ``time`` is still usable. However,
            please note that ``time`` may be deprecated and removed
            in a future release.
          type: string
          format: date-time
        is_private:
          description: '``true`` if this comment is private (only visible to a certain group called the "insidergroup"), ``false`` otherwise.'
          type: boolean
        is_markdown:
          description: '``true`` if this comment is private (only visible to a certain group called the "insidergroup"), ``false``'
          type: boolean
    Error:
      type: object
      properties:
        error:
          description: When an error occurs over REST, an object is returned with the key error set to true.
          const: true
        message:
          type: string
        code:
          type: integer

tags:
  - name: Attachments
    description: The Bugzilla API for creating, changing, and getting the details of attachments.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/attachment.html
  - name: Bugs
    description: This part of the Bugzilla REST API allows you to file new bugs in Bugzilla and to get information about existing bugs.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/bug.html
  - name: Bug User Last Visited
    description: Update the last-visited time for the specified bug and current user.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/bug-user-last-visit.html
  - name: Bugzilla Information
    description: These methods are used to get general configuration information about this Bugzilla instance.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/bugzilla.html
  - name: Classifications
    description: This part of the Bugzilla API allows you to deal with the available classifications. You will be able to get information about them as well as manipulate them.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/classification.html
  - name: Comments
    description: This allows you to get data about comments, given a bug ID or comment ID.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/comment.html
  - name: Components
    description: This part of the Bugzilla API looks at individual components and also allows updating their information.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/component.html
  - name: Bug Fields
    description: The Bugzilla API for getting details about bug fields.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/field.html
  - name: Flag Activity
    description: This API provides information about activity relating to bug and attachment flags.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/flag-activity.html
  - name: General
    description: This is the standard REST API for external programs that want to interact with Bugzilla. It provides a REST interface to various Bugzilla functions.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/general.html
  - name: Github
    description: |
      This API endpoint is for creating attachments in a bug that are redirect links to a
      specific Github pull request. This allows a bug viewer to click on the Github link
      and be automatically redirected to the pull request.

      **Github Setup Instructions**

      * From the repository main page, click on the Settings tab.
      * Click on Webhooks from the left side menu.
      * Click on the Add Webhook button near the top right.
      * For the payload url, enter ``https://bugzilla.mozilla.org/rest/github/pull_request``.
      * Choose ``application/json`` for the content type.
      * You will need to enter the signature secret obtained from a BMO admin (DO NOT SHARE).
      * Make sure Enable SSL is turned on.
      * Select "Let me select individual events" and only enable changes for "Pull Requests".
      * Make sure at the bottom that "Active" is checked on.
      * Save the webhook.

      > **Note:**
        Past pull requests will not automatically get a link created in the bug. New pull
        requests should get the link automatically when the pull request is first created.

      > **Note:** 
        The API endpoint looks at the pull request title for the bug id so
        make sure the title is formatted correctly to allow the bug id to be determined.
        Examples are: ``Bug 1234:``, ``Bug - 1234``, ``bug 1234``, or ``Bug 1234 -``.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/github.html
  - name: Groups
    description: The API for creating, changing, and getting information about groups.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/group.html
  - name: Products
    description: This part of the Bugzilla API allows you to list the available products and get information about them.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/product.html
  - name: Users
    description: This part of the Bugzilla API allows you to create user accounts, get information about user accounts and to log in or out using an existing account.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/user.html
  - name: Webhooks
    description: These methods are used to access information about and update your configured webhooks.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/extensions/Webhooks/api/v1/webhooks.html#list

externalDocs:
  description: Sphinx WebService API Reference
  url: https://bugzilla.readthedocs.io/en/latest/api/

openapi: 3.1.0
info:
  title: WebService API Reference
  description: BMO is Mozilla's highly customized version of Bugzilla.
  license:
    name: MPL-2.0
    url: https://github.com/mozilla-bteam/bmo/blob/master/LICENSE
  version: 1.0.0

servers:
  - url: https://bugzilla.mozilla.org/rest
    description: Production issue tracker for Firefox and other Mozilla products.
  - url: https://bugzilla-dev.allizom.org/rest
    description: Test instance for Bugzilla.

paths:
  /bug/{id_or_alias}/comment:
    get:
      tags: [Comments]
      summary: Get all comments for a bug
      description: This allows you to get all comments for a particular bug using the bug ID or alias.
      parameters:
        - name: id_or_alias
          in: path
          description: A single integer bug ID or alias.
          required: true
          schema:
            type:
              - string
              - integer
        - name: new_since
          in: query
          description: If specified, the method will only return comments newer than this time.
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: A list of Comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  bugs:
                    description: |
                      This is an object, where the keys are the numeric IDs of the bugs, and the value is a object with a single key, comments, which is an array of comments.
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        comments:
                          type: array
                          items:
                            $ref: "#/components/schemas/Comment"
                  comments:
                    type: object
              example:
                bugs:
                  35:
                    comments:
                      - time: "2000-07-25T13:50:04Z"
                        text: "test bug to fix problem in removing from cc list."
                        bug_id: 35
                        count: 0
                        attachment_id: null
                        is_private: false
                        tags: []
                        creator: user@bugzilla.org
                        creation_time: "2000-07-25T13:50:04Z"
                        id: 75

                comments: {}
        default:
          description: |
            Various error responses, including:

            * 100 (Invalid Bug Alias)
              If you specified an alias and there is no bug with that alias.
            * 101 (Invalid Bug ID)
              The bug_id you specified doesn't exist in the database.
            * 102 (Access Denied)
              You do not have access to the bug_id you specified.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/comment/{comment_id}:
    get:
      tags: [Comments]
      summary: Get a specific comment
      description: This allows you to get a specific comment based on the comment ID
      parameters:
        - name: comment_id
          in: path
          description: A single integer comment ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A single Comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    description: This is an object, where the keys are the numeric IDs of the bugs, and the value is a object with a single key, comments, which is an array of comments.
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/Comment"
                  bugs:
                    type: object
              example:
                comments:
                  75:
                    time: "2000-07-25T13:50:04Z"
                    text: "test bug to fix problem in removing from cc list."
                    bug_id: 35
                    count: 0
                    attachment_id: null
                    is_private: false
                    tags: []
                    creator: user@bugzilla.org
                    creation_time: "2000-07-25T13:50:04Z"
                    id: 75
                bugs: {}
        default:
          description: |
            Various error responses, including:

            * 110 (Comment Is Private) 
              You specified the id of a private comment in the “comment_ids” argument, and you are not in the “insider group” that can see private comments.
            * 111 (Invalid Comment ID)
              You specified an id in the “comment_ids” argument that is invalid–either you specified something that wasn’t a number, or there is no comment with that id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/{id}/comment:
    post:
      tags: [Comments]
      summary: Create a comment on a bug
      description: This allows you to add a comment to a bug in Bugzilla. All comments created via the API will be considered Markdown (specifically GitHub Flavored Markdown).
      parameters:
        - name: id
          in: path
          description: The ID or alias of the bug to append a comment to.
          required: true
          schema:
            type:
              - string
              - integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  description: List of integer bug IDs to add the comment to.
                  type: array
                  items:
                    type: integer
                comment:
                  description: The comment to append to the bug. If this is empty or all whitespace, an error will be thrown.
                  type: string
                is_private:
                  description: If set to true, the comment is private, otherwise it is assumed to be public.
                  type: boolean
                is_markdown:
                  description: "If true, the comment will be rendered as markdown. (default: ``false``)"
                  type: boolean
                work_time:
                  description: Adds this many hours to the "Hours Worked" on the bug. If you are not in the time tracking group, this value will be ignored.
                  type: number
              required:
                - comment
              additionalProperties: false
            example:
              ids:
                - 123
                - 456
              comment: "This is an additional comment"
              is_private: false
              is_markdown: true
              work_time: 2.5

      responses:
        200:
          description: ID of the newly-created comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              example:
                id: 789
        default:
          description: |
            Various error responses, including:

            * 54 (Hours Worked Too Large)
            * 100 (Invalid Bug Alias)
            * 101 (Invalid Bug ID)
            * 109 (Bug Edit Denied)
            * 113 (Can't Make Private Comments)
            * 114 (Comment Too Long)
            * 140 (Markdown Disabled)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/comment/tags/{query}:
    get:
      tags: [Comments]
      summary: Search for comment tags
      description: Searches for tags which contain the provided substring.
      parameters:
        - name: query
          in: path
          description: Only tags containing this substring will be returned.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: If provided, will return no more than "limit" tags. Defaults to "10".
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: An array of matching tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - "spam"
        default:
          description: |
            Various error responses, including:

            * 125 (Comment Tagging Disabled)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/comment/{comment_id}/tags:
    put:
      tags: [Comments]
      summary: Update tags for a comment
      description: Adds or removes tags from a comment.
      parameters:
        - name: comment_id
          in: path
          description: The ID of the comment to update.
          required: true
          schema:
            type: integer
          example: 75
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                add:
                  description: The tags to attach to the comment.
                  type: array
                  items:
                    type: string
                remove:
                  description: The tags to detach from the comment.
                  type: array
                  items:
                    type: string
              # QUESTION: should the parameter be in the body?
              # https://bmo.readthedocs.io/en/latest/api/core/v1/comment.html#update-comment-tags
              required:
                - comment_id
              additionalProperties: false
            example:
              # comment_id: 75
              add:
                - "spam"
                - "bad"

      responses:
        200:
          description: An array of strings containing the comment's updated tags.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - "bad"
                - "spam"
        default:
          description: |
            Various error responses, including:

            * 125 (Comment Tagging Disabled)
            * 126 (Invalid Comment Tag)
            * 127 (Comment Tag Too Short)
            * 128 (Comment Tag Too Long)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bug/comment/render:
    post:
      tags: [Comments]
      summary: Render comment as HTML
      description: Returns the HTML rendering of the provided comment text.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  description: Comment text to render.
                  type: string
                id:
                  description: The ID of the bug to render the comment against.
                  type: integer
              required:
                - text
              additionalProperties: false
            example:
              text: "This issue has been fixed in bug 1234."
              id: 2345
      responses:
        200:
          description: Text containing the HTML rendering
          content:
            application/json:
              schema:
                type: object
                properties:
                  html:
                    type: string
              example:
                html: 'This issue has been fixed in <a class="bz_bug_link bz_status_RESOLVED bz_closed" title="RESOLVED FIXED - some issue that was fixed" href="show_bug.cgi?id=1234">bug 1234</a>.'
        default:
          description: |
            Various error responses, including those thrown by :ref:`rest_single_bug`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          description: The globally unique ID for the comment.
          type: integer
        bug_id:
          description: The ID of the bug that this comment is on.
          type: integer
        attachment_id:
          description: If the comment was made on an attachment, this will be the ID of that attachment. Otherwise it will be null.
          type:
            - integer
            - null
        count:
          description: The number of the comment local to the bug. The Description is 0, comments start with 1.
          type: integer
        text:
          description: The body of the comment, including any special text (such as “this bug was marked as a duplicate of…”).
          type: string
        raw_text:
          description: The body of the comment without any special additional text.
          type: string
        creator:
          description: The login name of the comment’s author.
          type: string
        time:
          description: The time (in Bugzilla’s timezone) that the comment was added.
          type: string
          format: date-time
        creation_time:
          description: |
            This is exactly same as the ``time`` key. Use this
            field instead of ``time`` for consistency with other
            methods including :ref:`rest_single_bug` and
            :ref:`rest_attachments`.

            For compatibility, ``time`` is still usable. However,
            please note that ``time`` may be deprecated and removed
            in a future release.
          type: string
          format: date-time
        is_private:
          description: '``true`` if this comment is private (only visible to a certain group called the "insidergroup"), ``false`` otherwise.'
          type: boolean
        is_markdown:
          description: '``true`` if this comment is private (only visible to a certain group called the "insidergroup"), ``false``'
          type: boolean
    Error:
      type: object
      properties:
        error:
          description: When an error occurs over REST, an object is returned with the key error set to true.
          const: true
        message:
          type: string
        code:
          type: integer

tags:
  - name: Attachments
    description: The Bugzilla API for creating, changing, and getting the details of attachments.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/attachment.html
  - name: Bugs
    description: This part of the Bugzilla REST API allows you to file new bugs in Bugzilla and to get information about existing bugs.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/bug.html
  - name: Bug User Last Visited
    description: Update the last-visited time for the specified bug and current user.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/bug-user-last-visit.html
  - name: Bugzilla Information
    description: These methods are used to get general configuration information about this Bugzilla instance.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/bugzilla.html
  - name: Classifications
    description: This part of the Bugzilla API allows you to deal with the available classifications. You will be able to get information about them as well as manipulate them.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/classification.html
  - name: Comments
    description: This allows you to get data about comments, given a bug ID or comment ID.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/comment.html
  - name: Components
    description: This part of the Bugzilla API looks at individual components and also allows updating their information.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/component.html
  - name: Bug Fields
    description: The Bugzilla API for getting details about bug fields.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/field.html
  - name: Flag Activity
    description: This API provides information about activity relating to bug and attachment flags.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/flag-activity.html
  - name: General
    description: This is the standard REST API for external programs that want to interact with Bugzilla. It provides a REST interface to various Bugzilla functions.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/general.html
  - name: Github
    description: |
      This API endpoint is for creating attachments in a bug that are redirect links to a
      specific Github pull request. This allows a bug viewer to click on the Github link
      and be automatically redirected to the pull request.

      **Github Setup Instructions**

      * From the repository main page, click on the Settings tab.
      * Click on Webhooks from the left side menu.
      * Click on the Add Webhook button near the top right.
      * For the payload url, enter ``https://bugzilla.mozilla.org/rest/github/pull_request``.
      * Choose ``application/json`` for the content type.
      * You will need to enter the signature secret obtained from a BMO admin (DO NOT SHARE).
      * Make sure Enable SSL is turned on.
      * Select "Let me select individual events" and only enable changes for "Pull Requests".
      * Make sure at the bottom that "Active" is checked on.
      * Save the webhook.

      > **Note:**
        Past pull requests will not automatically get a link created in the bug. New pull
        requests should get the link automatically when the pull request is first created.

      > **Note:** 
        The API endpoint looks at the pull request title for the bug id so
        make sure the title is formatted correctly to allow the bug id to be determined.
        Examples are: ``Bug 1234:``, ``Bug - 1234``, ``bug 1234``, or ``Bug 1234 -``.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/github.html
  - name: Groups
    description: The API for creating, changing, and getting information about groups.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/group.html
  - name: Products
    description: This part of the Bugzilla API allows you to list the available products and get information about them.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/product.html
  - name: Users
    description: This part of the Bugzilla API allows you to create user accounts, get information about user accounts and to log in or out using an existing account.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/api/core/v1/user.html
  - name: Webhooks
    description: These methods are used to access information about and update your configured webhooks.
    externalDocs:
      url: https://bmo.readthedocs.io/en/latest/extensions/Webhooks/api/v1/webhooks.html#list

externalDocs:
  description: Sphinx WebService API Reference
  url: https://bugzilla.readthedocs.io/en/latest/api/
